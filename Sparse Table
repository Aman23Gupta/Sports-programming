static class SparseTable {

        int A[], log [], SpT[][];

        SparseTable(int[] A)
        {
            int n = A.length;	this.A = A;
            int k = (int)Math.floor(Math.log(n) / Math.log(2)) + 1;
            SpT = new int[n][k];

            for (int i = 0; i < n; i++)
                SpT[i][0] = A[i]; 					// RMQ of sub array starting at index i and of length 2^0=1

            //overall time complexity = O(n log n)
            for (int j = 1; (1<<j) <= n; j++)
                for (int i = 0; i + (1<<j) - 1 < n; i++)
                    SpT[i][j] = gcd(SpT[i+(1<<(j-1))][j-1], SpT[i][j-1]);

            log = new int[n+1];
            for (int i = 1, cur = 0; i < log.length; i++) {
                log[i] = 1<<cur+1 < i?++cur:cur;
            }
        }

        int query(int i, int j)
        {
            int k = log[j-i+1]; // 2^k <= (j-i+1)

            return gcd(SpT[i][k], SpT[j-(1<<k)+1][k]);
        }
    }
