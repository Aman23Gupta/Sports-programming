        //create table
        
        int n = sc.nextInt();
        long[] a = new long[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextLong();
        int K = (int) (Math.log(n)/Math.log(2));
        long mint[][] = new long[K+1][n];
        long maxt[][] = new long[K+1][n];
        for (int i = 0; i < n; i++) {
            mint[0][i] = a[i];
            maxt[0][i] = a[i];
        }

        for(int i=1;i<=K;i++) {
            for(int j=0;j+(1<<i)-1<n;j++) {
                mint[i][j] = Math.min(mint[i-1][j],mint[i-1][j+(1<<(i-1))]);
                maxt[i][j] = Math.max(maxt[i-1][j],maxt[i-1][j+(1<<(i-1))]);
            }
        }
        
    // find min in range
        public static long min(long[][] mint,int l,int r) {
        int k = r-l+1;
        int K = (int) (Math.log(k)/Math.log(2));
        int mid = r-(1<<K)+1;
        return Math.min(mint[K][l],mint[K][mid]);
    }
    
    // find max in range
    
        public static long max(long[][] maxt,int l,int r) {
        int k = r-l+1;
        int K = (int) (Math.log(k)/Math.log(2));
        int mid = r-(1<<K)+1;
        return Math.max(maxt[K][l],maxt[K][mid]);
    }
